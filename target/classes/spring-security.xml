<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:security="http://www.springframework.org/schema/security"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">

	<!-- 1. 登录页面和欢迎页面不需要权限 -->
	<security:http pattern="/toLogin" security="none" />
	<security:http pattern="/home" security="none" />
	
	<!-- Impl[0] **************************实现了UserDetailsService接口******************************************* -->
	<!-- 2.1. 声明UserDetailsService接口的实现类, 这个接口中定义了一个方法loadUserByUsername(String username)用于给spring security提供登录账户名所连接的账户的详细信息 -->
	<bean id="myUserDetailService" class="com.lanou.service.impl.MyUserDetailsServiceImpl"/>
	
	<!-- 2.2 声明权限认证管理器, 需要指定用户信息来源, 这里引用3的bean -->
	<security:authentication-manager alias="authenticationManager">
	<!-- 指定用户信息来源, 此处可以定义密码是否加盐处理以及加盐加密的方式(md5/sha) -->
		<security:authentication-provider
			user-service-ref="myUserDetailService">
		</security:authentication-provider>
	</security:authentication-manager>
	
	<!-- 3.1 配置登录认证的入口, 就是告诉spring security哪个请求链接是拦截的起点 -->
	<bean id="loginUrlAuthenticationEntryPoint"
		class="org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint">
		<property name="loginFormUrl" value="/login" />
	</bean>
	
	<!-- Impl[1] **************************实现了UsernamePasswordAuthenticationFilter接口******************************************* -->
	<!-- 3.2* 配置登录权限认证的过滤器 -->
	<bean id="securityFilter" class="com.lanou.filter.AuthenticationFilter">
		<!-- 3.2.1 这里(filterProcessesUrl)是在定义权限过滤器的请求地址, 我们可以自定义value -->
		<property name="filterProcessesUrl" value="/login" />
		<property name="authenticationManager" ref="authenticationManager" />
		<!-- 3.2.2 如果权限认证失败, 转到如下请求地址 -->
		<property name="authenticationFailureHandler">
			<bean
				class="org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler">
				<property name="defaultFailureUrl" value="/toLogin?result=failed" />
			</bean>
		</property>
		<!-- Impl[2] **************************实现了AuthenticationSuccessHandler接口******************************************* -->
		<!-- 3.2.3* 如果权限认证成功 -->
		<property name="authenticationSuccessHandler">
			<bean class="com.lanou.filter.ExtrAuthenticationSuccessHandler">
				<property name="defaultTargetUrl" value="/hellouser" />
			</bean>
		</property>
	</bean>
	
	<!-- 3.3 配置哪些需要拦截的请求, 分别指定需要的权限(access-denied-page="/403" ==> 可以自定义权限不足的警示页面, 这里写的是请求地址) -->
	<security:http auto-config="false" use-expressions="true" access-denied-page="/403"
		entry-point-ref="loginUrlAuthenticationEntryPoint">
		<!-- 3.3.1 请求与权限对应列表 -->
		<security:intercept-url pattern="/hellouser"
			access="hasAnyRole('ROLE_USER', 'ROLE_ADMIN')" />
		<security:intercept-url pattern="/helloadmin"
			access="hasRole('ROLE_ADMIN')" />
		<security:custom-filter position="FORM_LOGIN_FILTER"
			ref="securityFilter" />
		<!-- 3.3.2 设置退出的链接以及退出到哪里(logout-success-url) -->
		<security:logout logout-url="/logout"
			logout-success-url="/home" delete-cookies="true" />
		<!-- 3.3.3 设置session管理 -->
		<security:session-management> 
		<!-- 3.3.4 设置最多允许一个账号登录几次 -->
			<security:concurrency-control max-sessions="1" error-if-maximum-exceeded="false"/> 
		</security:session-management>
	</security:http>
</beans>